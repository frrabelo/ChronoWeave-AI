<!-- src/Layout.astro -->
<!doctype html>
<html lang="pt-br" class="h-full">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="ChronoWeave AI: Gerador de Linhas do Tempo com IA e Storyblok" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap" rel="stylesheet">
		<style>
			body {
				font-family: 'Inter', sans-serif;
			}
		</style>
	</head>
	<body class="bg-gray-900 text-white h-full antialiased">
		<slot />
	</body>
</html>
```html
<!-- src/pages/index.astro -->
---
import Layout from '../layouts/Layout.astro';
import LoadingSpinner from '../components/LoadingSpinner.astro';
---

<Layout title="ChronoWeave AI - Gere sua Linha do Tempo">
  <main class="container mx-auto px-4 flex items-center justify-center min-h-screen">
    <div class="text-center w-full max-w-2xl">
      <h1 class="text-5xl md:text-7xl font-black bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 mb-4">
        ChronoWeave AI
      </h1>
      <p class="text-lg md:text-xl text-gray-300 mb-8">
        Digite um tópico e deixe a IA construir uma linha do tempo histórica completa para você,
        utilizando o poder do Storyblok.
      </p>

      <form id="topic-form" class="flex flex-col sm:flex-row gap-4">
        <input
          type="text"
          id="topic-input"
          name="topic"
          placeholder="Ex: A História do Cinema, A Corrida Espacial..."
          class="flex-grow bg-gray-800 border-2 border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-pink-500 transition-all duration-300"
          required
        />
        <button
          type="submit"
          id="submit-button"
          class="bg-pink-600 hover:bg-pink-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 flex items-center justify-center gap-2"
        >
          <span id="button-text">Gerar Linha do Tempo</span>
          <div id="loading-spinner" class="hidden">
            <LoadingSpinner />
          </div>
        </button>
      </form>
      <div id="error-message" class="text-red-400 mt-4 h-6"></div>
    </div>
  </main>

  <script>
    const form = document.getElementById('topic-form');
    const input = document.getElementById('topic-input');
    const submitButton = document.getElementById('submit-button');
    const buttonText = document.getElementById('button-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const errorMessage = document.getElementById('error-message');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const topic = input.value.trim();
      if (!topic) return;

      // Desabilitar o formulário e mostrar o spinner
      submitButton.disabled = true;
      input.disabled = true;
      buttonText.textContent = 'Gerando...';
      loadingSpinner.classList.remove('hidden');
      errorMessage.textContent = '';

      try {
        const response = await fetch('/api/generate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ topic }),
        });

        const data = await response.json();

        if (response.ok) {
          // Redireciona para a nova URL se a chamada for bem-sucedida
          window.location.href = data.url;
        } else {
          // Mostra a mensagem de erro se falhar
          throw new Error(data.message || 'Ocorreu um erro desconhecido.');
        }

      } catch (error) {
        console.error('Erro ao chamar a API:', error);
        errorMessage.textContent = `Falha ao gerar: ${error.message}`;
        // Reabilitar o formulário
        submitButton.disabled = false;
        input.disabled = false;
        buttonText.textContent = 'Gerar Linha do Tempo';
        loadingSpinner.classList.add('hidden');
      }
    });
  </script>
</Layout>
```html
<!-- src/pages/timeline/[slug].astro -->
---
import Layout from '../../layouts/Layout.astro';
import TimelineEvent from '../../components/TimelineEvent.astro';
import StoryblokClient from 'storyblok-js-client';

const { slug } = Astro.params;

// Inicializa o cliente Storyblok com o token de acesso da API de Conteúdo
const storyblokClient = new StoryblokClient({
  accessToken: import.meta.env.STORYBLOK_ACCESS_TOKEN,
});

let story = null;
let error = null;

try {
  // Busca a 'story' no Storyblok usando o slug da URL
  const { data } = await storyblokClient.get(`cdn/stories/timeline/${slug}`);
  story = data.story;
} catch (e) {
  console.error("Erro ao buscar dados do Storyblok:", e);
  error = "Não foi possível carregar a linha do tempo. Verifique o slug ou a conexão com o Storyblok.";
}

const timelineTitle = story ? story.content.title : "Linha do Tempo Não Encontrada";
const timelineSummary = story ? story.content.summary : "";
const events = story ? story.content.events_container : [];
---

<Layout title={timelineTitle}>
  <div class="container mx-auto px-4 py-16">
    {error && <p class="text-center text-red-400 text-2xl">{error}</p>}
    {story && (
      <article>
        <header class="text-center mb-12">
          <h1 class="text-5xl md:text-7xl font-black bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 mb-4">
            {timelineTitle}
          </h1>
          <p class="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto">
            {timelineSummary}
          </p>
        </header>

        <div class="relative wrap overflow-hidden p-10 h-full">
          <!-- A linha vertical central -->
          <div class="border-2-2 absolute border-opacity-20 border-gray-700 h-full border" style="left: 50%"></div>
          
          <!-- Mapeia cada evento para um componente TimelineEvent -->
          {events.map((event, index) => (
            <TimelineEvent 
              event={event} 
              isRight={index % 2 !== 0} 
            />
          ))}
        </div>
        
        <footer class="text-center mt-12">
            <a href="/" class="bg-gray-800 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300">
                Criar outra Linha do Tempo
            </a>
        </footer>
      </article>
    )}
  </div>
</Layout>
